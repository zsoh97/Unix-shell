/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 20 17:11:02 GMT 2021
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.file.InvalidPathException;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.app.TeeApplication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TeeApplication_ESTest extends TeeApplication_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String[] stringArray0 = new String[0];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      try { 
        teeApplication0.run(stringArray0, byteArrayInputStream0, filterOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // tee: Exception Caught
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TeeApplication teeApplication0 = new TeeApplication();
          byte[] byteArray0 = new byte[9];
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8);
          ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)0);
          String[] stringArray0 = new String[5];
          stringArray0[0] = "";
          stringArray0[1] = "";
          stringArray0[2] = "";
          stringArray0[3] = "c ;,s[";
          stringArray0[4] = "";
          try { 
            teeApplication0.run(stringArray0, byteArrayInputStream0, byteArrayOutputStream0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // tee: Exception Caught
             //
             verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "tee: ";
      try { 
        teeApplication0.teeFromStdin((Boolean) null, pipedInputStream0, stringArray0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      String[] stringArray0 = new String[0];
      Boolean boolean0 = Boolean.FALSE;
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 4);
      try { 
        teeApplication0.teeFromStdin(boolean0, byteArrayInputStream0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 6);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TeeApplication teeApplication0 = new TeeApplication();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        teeApplication0.run(stringArray0, byteArrayInputStream0, byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.args.TeeArguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tee: ";
      try { 
        teeApplication0.checkIfFileIsAccessible(stringArray0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = teeApplication0.checkIfFileIsAccessible(stringArray0);
      assertEquals("tee: : Is a directory", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ex";
      try { 
        teeApplication0.checkIfFileIsAccessible(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      String[] stringArray0 = new String[0];
      String string0 = teeApplication0.checkIfFileIsAccessible(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      Boolean boolean0 = Boolean.TRUE;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String[] stringArray0 = new String[0];
      String string0 = teeApplication0.teeFromStdin(boolean0, sequenceInputStream0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      try { 
        teeApplication0.checkIfFileIsAccessible((String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Exception Caught
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      Boolean boolean0 = Boolean.FALSE;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1234);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      try { 
        teeApplication0.teeFromStdin(boolean0, pipedInputStream0, stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[0];
          Boolean boolean0 = Boolean.TRUE;
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
          TeeApplication teeApplication0 = new TeeApplication();
          String[] stringArray0 = new String[1];
          stringArray0[0] = "No such file or directory";
          try { 
            teeApplication0.teeFromStdin(boolean0, byteArrayInputStream0, stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"C:\\Users\\\\Desktop\\CS4218 Project\\cs4218-project-ay2021-s2-2021-team22\\No such file or directory\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.File.createNewFile(File.java:1008)
             // sg.edu.nus.comp.cs4218.impl.app.TeeApplication.teeFromStdin(TeeApplication.java:98)
             // sun.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      String[] stringArray0 = new String[0];
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)22, 8);
      try { 
        teeApplication0.run(stringArray0, byteArrayInputStream0, (OutputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // tee: OutputStream not provided
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      String[] stringArray0 = new String[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        teeApplication0.run(stringArray0, (InputStream) null, byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // tee: InputStream not provided
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 6);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TeeApplication teeApplication0 = new TeeApplication();
      try { 
        teeApplication0.run((String[]) null, byteArrayInputStream0, byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // tee: Null arguments
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TeeApplication teeApplication0 = new TeeApplication();
      teeApplication0.run(stringArray0, byteArrayInputStream0, byteArrayOutputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      String[] stringArray0 = new String[0];
      Boolean boolean0 = Boolean.FALSE;
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        teeApplication0.teeFromStdin(boolean0, byteArrayInputStream0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
