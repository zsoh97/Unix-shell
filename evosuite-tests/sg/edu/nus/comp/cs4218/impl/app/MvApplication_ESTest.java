/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 20 17:25:04 GMT 2021
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.app.MvApplication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MvApplication_ESTest extends MvApplication_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      Boolean boolean0 = Boolean.FALSE;
      try { 
        mvApplication0.mvFilesToFolder(boolean0, "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MvApplication mvApplication0 = new MvApplication();
          Boolean boolean0 = Boolean.TRUE;
          String[] stringArray0 = new String[1];
          stringArray0[0] = "";
          try { 
            mvApplication0.mvFilesToFolder(boolean0, "", stringArray0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Error: Unable to move file
             //
             verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MvApplication mvApplication0 = new MvApplication();
          Boolean boolean0 = Boolean.TRUE;
          try { 
            mvApplication0.mvSrcFileToDestFile(boolean0, "h%5)]", "h%5)]");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // mv: Security manager blocks (\"java.io.FilePermission\" \"C:\\Users\\\\Desktop\\CS4218 Project\\cs4218-project-ay2021-s2-2021-team22\\h%5)]\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.WindowsPath.checkWrite(WindowsPath.java:799)
             // sun.nio.fs.WindowsFileCopy.move(WindowsFileCopy.java:283)
             // sun.nio.fs.WindowsFileSystemProvider.move(WindowsFileSystemProvider.java:287)
             // java.nio.file.Files.move(Files.java:1395)
             // sg.edu.nus.comp.cs4218.impl.app.MvApplication.mvSrcFileToDestFile(MvApplication.java:91)
             // sun.reflect.GeneratedMethodAccessor48.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MvApplication mvApplication0 = new MvApplication();
          Boolean boolean0 = new Boolean("");
          String[] stringArray0 = new String[1];
          stringArray0[0] = "";
          try { 
            mvApplication0.mvFilesToFolder(boolean0, "", stringArray0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Error: Unable to move file
             //
             verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[0];
      String string0 = mvApplication0.mvFilesToFolder(boolean0, (String) null, stringArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MvApplication mvApplication0 = new MvApplication();
          Boolean boolean0 = new Boolean("Is missing");
          try { 
            mvApplication0.mvSrcFileToDestFile(boolean0, "Is missing", "Is missing");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // mv: Security manager blocks (\"java.io.FilePermission\" \"C:\\Users\\\\Desktop\\CS4218 Project\\cs4218-project-ay2021-s2-2021-team22\\Is missing\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.WindowsPath.checkWrite(WindowsPath.java:799)
             // sun.nio.fs.WindowsFileCopy.move(WindowsFileCopy.java:283)
             // sun.nio.fs.WindowsFileSystemProvider.move(WindowsFileSystemProvider.java:287)
             // java.nio.file.Files.move(Files.java:1395)
             // sg.edu.nus.comp.cs4218.impl.app.MvApplication.mvSrcFileToDestFile(MvApplication.java:93)
             // sun.reflect.GeneratedMethodAccessor48.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("user.dir");
      MvApplication mvApplication0 = new MvApplication();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "user.dir";
      stringArray0[1] = "user.dir";
      stringArray0[2] = "user.dir";
      stringArray0[3] = "user.dir";
      stringArray0[4] = "user.dir";
      try { 
        mvApplication0.run(stringArray0, pipedInputStream0, mockPrintStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mv: Too many arguments
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MvApplication mvApplication0 = new MvApplication();
          String[] stringArray0 = new String[2];
          stringArray0[0] = "Null argu]ments";
          stringArray0[1] = "Null argu]ments";
          MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Null argu]ments");
          try { 
            mvApplication0.run(stringArray0, (InputStream) null, mockFileOutputStream0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // mv: mv: Security manager blocks (\"java.io.FilePermission\" \"C:\\Users\\\\Desktop\\CS4218 Project\\cs4218-project-ay2021-s2-2021-team22\\Null argu]ments\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.WindowsPath.checkWrite(WindowsPath.java:799)
             // sun.nio.fs.WindowsFileCopy.move(WindowsFileCopy.java:283)
             // sun.nio.fs.WindowsFileSystemProvider.move(WindowsFileSystemProvider.java:287)
             // java.nio.file.Files.move(Files.java:1395)
             // sg.edu.nus.comp.cs4218.impl.app.MvApplication.mvSrcFileToDestFile(MvApplication.java:91)
             // sg.edu.nus.comp.cs4218.impl.app.MvApplication.run(MvApplication.java:71)
             // sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MvApplication mvApplication0 = new MvApplication();
          String[] stringArray0 = new String[2];
          stringArray0[0] = "";
          stringArray0[1] = "BLr8Ty9l!D7z]";
          PipedInputStream pipedInputStream0 = new PipedInputStream(7);
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
          MockFile mockFile0 = new MockFile("", "{F+X6y&Y|GZhTk=a");
          MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
          try { 
            mvApplication0.run(stringArray0, bufferedInputStream0, mockFileOutputStream0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // mv: mv: Security manager blocks (\"java.io.FilePermission\" \"C:\\Users\\\\Desktop\\CS4218 Project\\cs4218-project-ay2021-s2-2021-team22\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.WindowsPath.checkWrite(WindowsPath.java:799)
             // sun.nio.fs.WindowsFileCopy.move(WindowsFileCopy.java:283)
             // sun.nio.fs.WindowsFileSystemProvider.move(WindowsFileSystemProvider.java:287)
             // java.nio.file.Files.move(Files.java:1395)
             // sg.edu.nus.comp.cs4218.impl.app.MvApplication.mvSrcFileToDestFile(MvApplication.java:91)
             // sg.edu.nus.comp.cs4218.impl.app.MvApplication.run(MvApplication.java:71)
             // sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      String[] stringArray0 = new String[2];
      stringArray0[0] = " not found. ";
      stringArray0[1] = " not found. ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" not found. ");
      try { 
        mvApplication0.run(stringArray0, (InputStream) null, mockFileOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mv: C:\\Users\\\\Desktop\\CS4218 Project\\cs4218-project-ay2021-s2-2021-team22\\not found. not found. No such file or directory
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MvApplication mvApplication0 = new MvApplication();
          String[] stringArray0 = new String[2];
          stringArray0[0] = "Null arguments";
          stringArray0[1] = "";
          MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Null arguments", false);
          MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
          try { 
            mvApplication0.run(stringArray0, (InputStream) null, mockPrintStream0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // mv: Error: Unable to move file
             //
             verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      String[] stringArray0 = new String[1];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Null argu]mients");
      try { 
        mvApplication0.run(stringArray0, (InputStream) null, mockFileOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mv: Missing Argument
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      String[] stringArray0 = new String[1];
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)4);
      try { 
        mvApplication0.run(stringArray0, pipedInputStream0, (OutputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mv: OutputStream not provided
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DC[!m2;x");
      try { 
        mvApplication0.run((String[]) null, (InputStream) null, mockFileOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mv: Null arguments
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
      }
  }
}
